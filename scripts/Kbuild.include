comma   := ,
quote   := "
squote  := '
empty   :=
space   := $(empty) $(empty)
space_escape := _-_SPACE_-_
pound := \#

dot-target = $(dir $@).$(notdir $@)

depfile = $(subst $(comma),_,$(dot-target).d)

basetarget = $(basename $(notdir $@))

real-prereqs = $(filter-out $(PHONY), $^)

escsq = $(subst $(squote),'\$(squote)',$1)

stringify = $(squote)$(quote)$1$(quote)$(squote)

       kecho := :
 quiet_kecho := echo
silent_kecho := :
kecho := $($(quiet)kecho)

define filechk
	$(check-FORCE)
	$(Q)set -e;						\
	mkdir -p $(dir $@);					\
	trap "rm -f $(dot-target).tmp" EXIT;			\
	{ $(filechk_$(1)); } > $(dot-target).tmp;		\
	if [ ! -r $@ ] || ! cmp -s $@ $(dot-target).tmp; then	\
		$(kecho) '  UPD     $@';			\
		mv -f $(dot-target).tmp $@;			\
	fi
endef

build := -f $(srctree)/scripts/Makefile.build obj

echo-cmd = $(if $($(quiet)cmd_$(1)),\
	echo '  $(call escsq,$($(quiet)cmd_$(1)))$(echo-why)';)

cmd = @set -e; $(echo-cmd) $($(quiet)redirect) $(cmd_$(1))

ifneq ($(KBUILD_NOCMDDEP),1)
cmd-check = $(filter-out $(subst $(space),$(space_escape),$(strip $(cmd_$@))), \
                         $(subst $(space),$(space_escape),$(strip $(cmd_$1))))
else
cmd-check = $(if $(strip $(cmd_$@)),,1)
endif

make-cmd = $(call escsq,$(subst $(pound),$$(pound),$(subst $$,$$$$,$(cmd_$(1)))))

newer-prereqs = $(filter-out $(PHONY),$?)

check-FORCE = $(if $(filter FORCE, $^),,$(warning FORCE prerequisite is missing))

if-changed-cond = $(newer-prereqs)$(cmd-check)$(check-FORCE)

if_changed = $(if $(if-changed-cond),$(cmd_and_savecmd),@:)

cmd_and_savecmd =                                                            \
	$(cmd);                                                              \
	printf '%s\n' 'cmd_$@ := $(make-cmd)' > $(dot-target).cmd

if_changed_dep = $(if $(if-changed-cond),$(cmd_and_fixdep),@:)

cmd_and_fixdep =                                                             \
	$(cmd);                                                              

if_changed_rule = $(if $(if-changed-cond),$(rule_$(1)),@:)
