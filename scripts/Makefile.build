src := $(obj)

PHONY := __build
__build:

obj-y :=
lib-y :=
comma   := ,
quote   := "
squote  := '
empty   :=
space   := $(empty) $(empty)
pound := \#

dot-target = $(dir $@).$(notdir $@)

basetarget = $(basename $(notdir $@))

real-prereqs = $(filter-out $(PHONY), $^)

escsq = $(subst $(squote),'\$(squote)',$1)

stringify = $(squote)$(quote)$1$(quote)$(squote)

kecho := :
define filechk
	mkdir -p $(dir $@);					\
	{ $(filechk_$(1)); } > $(dot-target).tmp;		\
	if [ ! -r $@ ] || ! cmp -s $@ $(dot-target).tmp; then	\
		$(kecho) '  UPD     $@';			\
		mv -f $(dot-target).tmp $@;			\
	fi
endef

echo-cmd = $(if $($(quiet)cmd_$(1)),\
	echo '  $(call escsq,$($(quiet)cmd_$(1)))$(echo-why)';)

cmd = @set -e; $(echo-cmd) $($(quiet)redirect) $(cmd_$(1))

cmd-check = $(if $(strip $(cmd_$@)),,1)

make-cmd = $(call escsq,$(subst $(pound),$$(pound),$(subst $$,$$$$,$(cmd_$(1)))))

newer-prereqs = $(filter-out $(PHONY),$?)

check-FORCE = $(if $(filter FORCE, $^),,$(warning FORCE prerequisite is missing))

if-changed-cond = $(newer-prereqs)$(cmd-check)$(check-FORCE)

if_changed = $(if $(if-changed-cond),$(cmd_and_savecmd),@:)

cmd_and_savecmd =                                                            \
	$(cmd);                                                              \
	printf '%s\n' 'cmd_$@ := $(make-cmd)' > $(dot-target).cmd

kbuild-dir := $(if $(filter /%,$(src)),$(src),$(srctree)/$(src))
include $(or $(wildcard $(kbuild-dir)/Kbuild), $(kbuild-dir)/Makefile)

lib-y := $(filter-out $(obj-y), $(sort $(lib-y)))

subdir-ym := $(sort $(patsubst %/,%, $(filter %/, $(obj-y))))

obj-y := $(patsubst %/, %/built-in.a, $(obj-y))

suffix-search = $(strip $(foreach s, $3, $($(1:%$(strip $2)=%$s))))
real-search = $(foreach m, $1, $(if $(call suffix-search, $m, $2, $3 -), $(call suffix-search, $m, $2, $3), $m))

real-obj-y := $(call real-search, $(obj-y), .o, -objs -y)

extra-y		:= $(addprefix $(obj)/, $(extra-y))
lib-y		:= $(addprefix $(obj)/, $(lib-y))
real-obj-y	:= $(addprefix $(obj)/, $(real-obj-y))
subdir-ym	:= $(addprefix $(obj)/, $(subdir-ym))

__modname = $(basetarget)

modname = $(subst $(space),:,$(__modname))
modfile = $(addprefix $(obj)/,$(__modname))

target-stem = $(basename $(patsubst $(obj)/%,%,$@))

name-fix-token = $(subst $(comma),_,$(subst -,_,$1))
name-fix = $(call stringify,$(call name-fix-token,$1))
basename_flags = -DKBUILD_BASENAME=$(call name-fix,$(basetarget))
modname_flags  = -DKBUILD_MODNAME=$(call name-fix,$(modname)) -D__KBUILD_MODNAME=kmod_$(call name-fix-token,$(modname))
modfile_flags  = -DKBUILD_MODFILE=$(call stringify,$(modfile))

_c_flags       = $(filter-out $(CFLAGS_REMOVE_$(target-stem).o), \
                     $(filter-out $(ccflags-remove-y), \
                         $(KBUILD_CPPFLAGS) $(KBUILD_CFLAGS) $(ccflags-y)) \
                     $(CFLAGS_$(target-stem).o))

_a_flags       = $(filter-out $(AFLAGS_REMOVE_$(target-stem).o), \
                     $(filter-out $(asflags-remove-y), \
                         $(KBUILD_CPPFLAGS) $(KBUILD_AFLAGS) $(asflags-y)) \
                     $(AFLAGS_$(target-stem).o))

_cpp_flags     = $(KBUILD_CPPFLAGS) $(cppflags-y) $(CPPFLAGS_$(target-stem).lds)

_c_flags   += -I $(srctree)/$(src) -I $(objtree)/$(obj)
_a_flags   += -I $(srctree)/$(src) -I $(objtree)/$(obj)
_cpp_flags += -I $(srctree)/$(src) -I $(objtree)/$(obj)

c_flags        = $(NOSTDINC_FLAGS) $(LINUXINCLUDE) -include $(srctree)/include/linux/compiler_types.h \
		 $(_c_flags) $(modfile_flags) $(basename_flags) $(modname_flags)

a_flags        = $(NOSTDINC_FLAGS) $(LINUXINCLUDE) $(_a_flags)

cpp_flags      = $(NOSTDINC_FLAGS) $(LINUXINCLUDE) $(_cpp_flags)

define multi_depend
$(foreach m, $1, \
	$(eval $m: \
	$(addprefix $(obj)/, $(call suffix-search, $(patsubst $(obj)/%,%,$m), $2, $3))))
endef

define filechk_offsets
	 echo "#ifndef $2"; \
	 echo "#define $2"; \
	 echo "/*"; \
	 echo " * DO NOT MODIFY."; \
	 echo " *"; \
	 echo " * This file was generated by Kbuild"; \
	 echo " */"; \
	 echo ""; \
	 sed -ne 's:^[[:space:]]*\.ascii[[:space:]]*"\(.*\)".*:\1:; \
		/^->/{s:->#\(.*\):/* \1 */:; \
		s:^->\([^ ]*\) [\$$#]*\([^ ]*\) \(.*\):#define \1 \2 /* \3 */:; \
		s:->::; p;}' < $<; \
	 echo ""; \
	 echo "#endif"
endef

host-csingle	:= $(addprefix $(obj)/,$(hostprogs))
host-cmulti	:= $(addprefix $(obj)/,$(foreach m,$(hostprogs), $(if $($(m)-objs),$(m))))
host-cobjs	:= $(addprefix $(obj)/,$(sort $(foreach m,$(hostprogs),$($(m)-objs))))

hostc_flags = $(KBUILD_HOSTCFLAGS) $(HOST_EXTRACFLAGS) $(HOSTCFLAGS_$(target-stem).o) -I $(objtree)/$(obj)

$(host-csingle): $(obj)/%: $(src)/%.c
	$(Q) $(HOSTCC) $(hostc_flags) $(KBUILD_HOSTLDFLAGS) -o $@ $<

$(host-cmulti):
	$(Q) $(HOSTCC) $(KBUILD_HOSTLDFLAGS) -o $@ $(addprefix $(obj)/, $($(target-stem)-objs))

$(call multi_depend, $(host-cmulti), , -objs)

$(host-cobjs): $(obj)/%.o: $(src)/%.c
	$(Q) $(HOSTCC) $(hostc_flags) -c -o $@ $<

subdir-builtin := $(sort $(filter %/built-in.a, $(real-obj-y)))

targets-for-builtin := $(extra-y) $(obj)/lib.a $(obj)/built-in.a

targets += $(host-csingle)
targets += $(targets-for-builtin)
targets += $(filter-out $(subdir-builtin), $(real-obj-y)) $(lib-y)

$(obj)/%.s: $(src)/%.c
	@echo "  CC     " $@
	@ $(CC) $(filter-out $(DEBUG_CFLAGS) $(CC_FLAGS_LTO), $(c_flags)) -fverbose-asm -S -o $@ $<

$(obj)/%.o: $(src)/%.c
	@echo "  CC     " $@
	@ $(CC) $(c_flags) -c -o $@ $<

$(obj)/%.o: $(src)/%.S
	@echo "  CC     " $@
	@ $(CC) $(a_flags) -c -o $@ $< $(cmd_objtool)

$(obj)/%.lds: $(src)/%.lds.S
	@echo "  LDS    " $@
	@ $(CPP) $(cpp_flags) -P -U$(ARCH) -D__ASSEMBLY__ -DLINKER_SCRIPT -o $@ $<

$(subdir-builtin): $(obj)/%/built-in.a: $(obj)/%

$(obj)/built-in.a: $(real-obj-y)
	$(Q) echo $(patsubst $(obj)/%,%,$(real-prereqs)) | sed -E 's:([^ ]+):$(obj)/\1:g' | xargs $(AR) cDPrST $@

$(obj)/lib.a: $(lib-y)
	$(Q) $(AR) cDPrsT $@ $(real-prereqs)

__build: $(targets-for-builtin) $(always-y)

PHONY += $(subdir-ym)
$(subdir-ym):
	$(Q) $(MAKE) -f $(srctree)/scripts/Makefile.build obj=$@

PHONY += FORCE

FORCE:
obj-dirs := $(sort $(patsubst %/,%, $(dir $(targets))))
$(shell mkdir -p $(obj-dirs))

.PHONY: $(PHONY)
