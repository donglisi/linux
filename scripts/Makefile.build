src := $(obj)

PHONY := __build
__build:

obj-y :=
obj-m :=
lib-y :=
lib-m :=
always-y :=
targets :=
subdir-y :=
EXTRA_AFLAGS   :=
EXTRA_CFLAGS   :=
EXTRA_CPPFLAGS :=
EXTRA_LDFLAGS  :=
asflags-y  :=
ccflags-y  :=
cppflags-y :=
ldflags-y  :=

subdir-asflags-y :=
subdir-ccflags-y :=

include $(srctree)/scripts/Kbuild.include

kbuild-dir := $(if $(filter /%,$(src)),$(src),$(srctree)/$(src))
include $(or $(wildcard $(kbuild-dir)/Kbuild),$(kbuild-dir)/Makefile)

include $(srctree)/scripts/Makefile.lib

hostprogs := $(sort $(hostprogs))
ifneq ($(hostprogs),)
include $(srctree)/scripts/Makefile.host
endif

subdir-builtin := $(sort $(filter %/built-in.a, $(real-obj-y)))

targets-for-builtin := $(extra-y)

ifneq ($(strip $(lib-y) $(lib-m) $(lib-)),)
targets-for-builtin += $(obj)/lib.a
endif

targets-for-builtin += $(obj)/built-in.a
targets += $(targets-for-builtin)

$(obj)/%.s: $(src)/%.c
	$(Q) $(CC) $(filter-out $(DEBUG_CFLAGS) $(CC_FLAGS_LTO), $(c_flags)) -fverbose-asm -S -o $@ $<

$(obj)/%.i: $(src)/%.c
	$(Q) $(CPP) $(c_flags) -o $@ $<

is-standard-object = $(if $(filter-out y%, $(OBJECT_FILES_NON_STANDARD_$(basetarget).o)$(OBJECT_FILES_NON_STANDARD)n),y)

$(obj)/%.o: objtool-enabled = $(if $(is-standard-object),$(if $(delay-objtool),$(is-single-obj-m),y))

$(obj)/%.o: $(src)/%.c
	@echo "  CC      " $@
	@ $(CC) $(c_flags) -c -o $@ $<

$(obj)/%.o: $(src)/%.S
	$(Q) $(CC) $(a_flags) -c -o $@ $< $(cmd_objtool)

targets += $(filter-out $(subdir-builtin), $(real-obj-y)) $(lib-y) $(always-y) $(MAKECMDGOALS)

$(obj)/%.lds: $(src)/%.lds.S
	$(Q) $(CPP) $(cpp_flags) -P -U$(ARCH) -D__ASSEMBLY__ -DLINKER_SCRIPT -o $@ $<

$(subdir-builtin): $(obj)/%/built-in.a: $(obj)/%

$(obj)/built-in.a: $(real-obj-y)
	$(Q) echo $(patsubst $(obj)/%,%,$(real-prereqs)) | \
		sed -E 's:([^ ]+):$(obj)/\1:g' | \
		xargs $(AR) cDPrST $@

$(obj)/lib.a: $(lib-y)
	$(Q) $(AR) cDPrsT $@ $(real-prereqs)

__build: $(targets-for-builtin) $(always-y)

PHONY += $(subdir-ym)
$(subdir-ym):
	@ $(MAKE) $(build)=$@ $(if $(filter $@/, $(KBUILD_SINGLE_TARGETS)),single-build=)

PHONY += FORCE

FORCE:
obj-dirs := $(sort $(patsubst %/,%, $(dir $(targets))))
obj-dirs := $(strip $(filter-out $(existing-dirs), $(obj-dirs)))
$(shell mkdir -p $(obj-dirs))

.PHONY: $(PHONY)
