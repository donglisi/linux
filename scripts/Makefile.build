src := $(obj)
HOSTCC	= gcc
CPP	= $(CC) -E
CC	= gcc
LD	= ld
AR	= ar
NM	= nm
OBJCOPY	= objcopy
REALMODE_CFLAGS := -m16 -g -Os -DDISABLE_BRANCH_PROFILING -D__DISABLE_EXPORTS -Wall -Wstrict-prototypes -march=i386 -mregparm=3 -fno-strict-aliasing -fomit-frame-pointer -fno-pic -mno-mmx -mno-sse -fcf-protection=none -ffreestanding -fno-stack-protector -Wno-address-of-packed-member  -D_SETUP

__build:

obj-y :=
lib-y :=
space   := " "

kbuild-dir := $(if $(filter /%,$(obj)),$(obj),$(srctree)/$(obj))
ifeq ($(abs_srctree)/.,$(kbuild-dir))

dot-target = $(dir $@).$(notdir $@)
kecho := :
define filechk
	mkdir -p $(dir $@);					\
	{ $(filechk_$(1)); } > $(dot-target).tmp;		\
	if [ ! -r $@ ] || ! cmp -s $@ $(dot-target).tmp; then	\
		$(kecho) '  UPD     $@';			\
		mv -f $(dot-target).tmp $@;			\
	fi
endef

define filechk_offsets
	 echo "#ifndef $2"; \
	 echo "#define $2"; \
	 echo "/*"; \
	 echo " * DO NOT MODIFY."; \
	 echo " *"; \
	 echo " * This file was generated by Kbuild"; \
	 echo " */"; \
	 echo ""; \
	 sed -ne 's:^[[:space:]]*\.ascii[[:space:]]*"\(.*\)".*:\1:; \
		/^->/{s:->#\(.*\):/* \1 */:; \
		s:^->\([^ ]*\) [\$$#]*\([^ ]*\) \(.*\):#define \1 \2 /* \3 */:; \
		s:->::; p;}' < $<; \
	 echo ""; \
	 echo "#endif"
endef

filechk_gentimeconst = echo 1000 | bc -q $<

bounds-file := include/generated/bounds.h
always-y := $(bounds-file)
targets := kernel/bounds.s
$(bounds-file): kernel/bounds.s
	@ $(call filechk,offsets,__LINUX_BOUNDS_H__)
timeconst-file := include/generated/timeconst.h
$(timeconst-file): kernel/time/timeconst.bc
	@ $(call filechk,gentimeconst)
offsets-file := include/generated/asm-offsets.h
always-y += $(offsets-file)
targets += arch/x86/kernel/asm-offsets.s
arch/x86/kernel/asm-offsets.s: $(timeconst-file) $(bounds-file)
$(offsets-file): arch/x86/kernel/asm-offsets.s
	@ $(call filechk,offsets,__ASM_OFFSETS_H__)

$(obj)/%.s: $(obj)/%.c
	@echo "  CC     " $@
	@ $(CC) $(c_flags) -S -o $@ $<
else
  include $(kbuild-dir)/Makefile
endif

lib-y := $(filter-out $(obj-y), $(sort $(lib-y)))

subdir-ym := $(sort $(patsubst %/,%, $(filter %/, $(obj-y))))

obj-y := $(patsubst %/, %/built-in.a, $(obj-y))

suffix-search = $(strip $(foreach s, $3, $($(1:%$(strip $2)=%$s))))
real-search = $(foreach m, $1, $(if $(call suffix-search, $m, $2, $3 -), $(call suffix-search, $m, $2, $3), $m))

real-obj-y := $(call real-search, $(obj-y), .o, -objs -y)

extra-y		:= $(addprefix $(obj)/, $(extra-y))
lib-y		:= $(addprefix $(obj)/, $(lib-y))
real-obj-y	:= $(addprefix $(obj)/, $(real-obj-y))
subdir-ym	:= $(addprefix $(obj)/, $(subdir-ym))

basetarget = $(basename $(notdir $@))
__modname = $(basetarget)
modname = $(subst $(space),:,$(__modname))
modfile = $(addprefix $(obj)/,$(__modname))

target-stem = $(basename $(patsubst $(obj)/%,%,$@))

comma   := ,
quote   := "
squote  := '
stringify = $(squote)$(quote)$1$(quote)$(squote)
name-fix-token = $(subst $(comma),_,$(subst -,_,$1))
name-fix = $(call stringify,$(call name-fix-token,$1))
basename_flags = -DKBUILD_BASENAME=$(call name-fix,$(basetarget))
modname_flags  = -DKBUILD_MODNAME=$(call name-fix,$(modname)) -D__KBUILD_MODNAME=kmod_$(call name-fix-token,$(modname))
modfile_flags  = -DKBUILD_MODFILE=$(call stringify,$(modfile))

LINUXINCLUDE	:= -nostdinc \
		-I $(srctree)/$(obj) \
		-I $(srctree)/include \
		-I $(srctree)/include/uapi \
		-I $(srctree)/arch/x86/include \
		-I $(srctree)/arch/x86/include/uapi \
		-I $(objtree)/$(obj) \
		-I $(objtree)/include \
		-I $(objtree)/arch/x86/include/generated \
		-I $(objtree)/arch/x86/include/generated/uapi \
		-I $(objtree)/include/generated/uapi \
		-include $(srctree)/config.h \
                -include $(srctree)/include/linux/kconfig.h \
		-include $(srctree)/include/linux/compiler_types.h \
                -include $(srctree)/include/linux/compiler-version.h

KBUILD_CFLAGS += -D__KERNEL__

c_flags        = $(LINUXINCLUDE) $(KBUILD_CFLAGS) $(CFLAGS_$(target-stem).o) $(modfile_flags) $(basename_flags) $(modname_flags)

$(obj)/%.o: $(obj)/%.c
	@echo "  CC     " $@
	@ $(CC) $(c_flags) -c -o $@ $<

$(obj)/%.o: $(obj)/%.S
	@echo "  AS     " $@
	@ $(CC) $(LINUXINCLUDE) $(KBUILD_CFLAGS) -D__ASSEMBLY__ -c -o $@ $<

$(obj)/%.lds: $(obj)/%.lds.S
	@echo "  LDS    " $@
	@ $(CPP) $(LINUXINCLUDE) -P -Ux86 -D__ASSEMBLY__ -DLINKER_SCRIPT -o $@ $<

$(obj)/built-in.a: $(real-obj-y)
	$(Q) echo $(patsubst $(obj)/%, %, $^) | sed -E 's:([^ ]+):$(obj)/\1:g' | xargs $(AR) cDPrST $@

$(obj)/lib.a: $(lib-y)
	$(Q) $(AR) cDPrsT $@ $^

$(sort $(filter %/built-in.a, $(real-obj-y))): $(obj)/%/built-in.a: $(obj)/%

host-csingle	:= $(foreach m,$(hostprogs), $(if $($(m)-objs),,$(m)))
host-cmulti	:= $(foreach m,$(hostprogs), $(if $($(m)-objs),$(m)))
host-cobjs	:= $(sort $(foreach m,$(hostprogs),$($(m)-objs)))
host-csingle	:= $(addprefix $(obj)/,$(host-csingle))
host-cmulti	:= $(addprefix $(obj)/,$(host-cmulti))
host-cobjs	:= $(addprefix $(obj)/,$(host-cobjs))

hostc_flags = -Wall -std=gnu11 -include $(srctree)/config.h -I $(objtree)/$(obj) -I$(srctree)/tools/include

$(host-csingle): $(obj)/%: $(obj)/%.c
	$(Q) $(HOSTCC) $(hostc_flags) -o $@ $<

define multi_depend
$(foreach m, $1, $(eval $m: $(addprefix $(obj)/, $(call suffix-search, $(patsubst $(obj)/%, %, $m), $2, $3))))
endef

$(host-cmulti):
	$(Q) $(HOSTCC) -o $@ $(addprefix $(obj)/, $($(target-stem)-objs))

$(call multi_depend, $(host-cmulti), , -objs)

$(host-cobjs): $(obj)/%.o: $(obj)/%.c
	$(Q) $(HOSTCC) $(hostc_flags) -c -o $@ $<

targets-for-builtin := $(extra-y) $(obj)/built-in.a
ifneq ($(strip $(lib-y)),)
targets-for-builtin += $(obj)/lib.a
endif
targets += $(host-csingle) $(targets-for-builtin) $(real-obj-y) $(lib-y)

__build: $(targets-for-builtin) $(always-y)

$(subdir-ym):
	$(Q) $(MAKE) -f $(srctree)/scripts/Makefile.build obj=$@

obj-dirs := $(sort $(dir $(targets)))
$(shell mkdir -p $(obj-dirs))

.PHONY: $(subdir-ym) FORCE